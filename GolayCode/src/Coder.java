
public class Coder {
    
    //   12x23 generator matrix used:
    //
    //   1 0 0 0 0 0 0 0 0 0 0 0  1 1 0 1 1 1 0 0 0 1 0
    //   0 1 0 0 0 0 0 0 0 0 0 0  1 0 1 1 1 0 0 0 1 0 1
    //   0 0 1 0 0 0 0 0 0 0 0 0  0 1 1 1 0 0 0 1 0 1 1
    //   0 0 0 1 0 0 0 0 0 0 0 0  1 1 1 0 0 0 1 0 1 1 0 
    //   0 0 0 0 1 0 0 0 0 0 0 0  1 1 0 0 0 1 0 1 1 0 1
    //   0 0 0 0 0 1 0 0 0 0 0 0  1 0 0 0 1 0 1 1 0 1 1
    //   0 0 0 0 0 0 1 0 0 0 0 0  0 0 0 1 0 1 1 0 1 1 1 
    //   0 0 0 0 0 0 0 1 0 0 0 0  0 0 1 0 1 1 0 1 1 1 0 
    //   0 0 0 0 0 0 0 0 1 0 0 0  0 1 0 1 1 0 1 1 1 0 0
    //   0 0 0 0 0 0 0 0 0 1 0 0  1 0 1 1 0 1 1 1 0 0 0
    //   0 0 0 0 0 0 0 0 0 0 1 0  0 1 1 0 1 1 1 0 0 0 1
    //   0 0 0 0 0 0 0 0 0 0 0 1  1 1 1 1 1 1 1 1 1 1 0
    //
    //   This matrix will be saved as an array of its 
    //   columns (from left to right) converted to decimal (reading columns from top to bottom).
    //   This way vector and matrix multiplication will be simpler
    
    int[] genMatrix;

    public Coder() {
        
        genMatrix = new int[23];

        //Both halfs of the generation matrix have cyclical structure and will be generated by shifting digits
        //Generating the first half of the generator matrix

        String column = "100000000000";
        int columnLength = column.length();

        //First 12 columns of the generator matrix will be the starting column shifted down

        for(int i = 0; i < columnLength; i++){
            genMatrix[i] =  Integer.parseInt(column,2);
            
            column = column.charAt(columnLength-1) + column.substring(0, columnLength-1);
        }

        //Generating the first half of the generator matrix

        column = "11011100010";

        //Remaining 11 columns of the matrix will be shifted up with the last digit of 1 (except the last column)

        for(int i = 0; i < columnLength-1; i++){
            if(i != columnLength-2){
                genMatrix[columnLength + i] =  Integer.parseInt(column + "1",2);
                //System.out.println("1: "+column + "1");
            }
            else{
                genMatrix[columnLength + i] =  Integer.parseInt(column + "0",2);
                //System.out.println("0: "+column + "0");
            }

            //System.out.println((columnLength + i)+" "+Integer.toBinaryString(genMatrix[columnLength + i]));
            column = column.substring(1) + column.charAt(0);
        }        
    }

    public String VectorCoding(String binaryVector){
        int decVector = Integer.parseInt(binaryVector,2);

        String codedVector = "";

        //Each digit of the coded vector is calculated by summing up all bits after 
        //performing AND operation between the input vector and corresponding generator matrix column

        for (int col : genMatrix) {
            codedVector += Integer.bitCount(decVector & col) % 2;
        }

        System.out.println("Input vector: " + binaryVector);
        System.out.println("Coded vector: " + codedVector);

        return codedVector;
    }


}
